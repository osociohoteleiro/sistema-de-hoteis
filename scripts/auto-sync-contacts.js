#!/usr/bin/env node

/**
 * Script de Sincroniza√ß√£o Autom√°tica de Contatos
 *
 * Este script pode ser executado como cron job para sincronizar automaticamente
 * dados de contatos desatualizados com a Evolution API.
 *
 * Uso:
 * node scripts/auto-sync-contacts.js [options]
 *
 * Op√ß√µes:
 * --days=N       Sincronizar contatos n√£o atualizados h√° N dias (padr√£o: 7)
 * --max=N        M√°ximo de contatos para processar (padr√£o: 50)
 * --api-url=URL  URL base da API (padr√£o: http://localhost:3001)
 *
 * Exemplo de cron job (executar todo dia √†s 2h da manh√£):
 * 0 2 * * * cd /path/to/project && node scripts/auto-sync-contacts.js >> logs/auto-sync.log 2>&1
 */

const axios = require('axios');

// Configura√ß√µes padr√£o
const DEFAULT_CONFIG = {
  daysOld: 7,
  maxContacts: 50,
  apiUrl: 'http://localhost:3001'
};

// Processar argumentos da linha de comando
function parseArgs() {
  const args = process.argv.slice(2);
  const config = { ...DEFAULT_CONFIG };

  args.forEach(arg => {
    if (arg.startsWith('--days=')) {
      config.daysOld = parseInt(arg.split('=')[1]) || DEFAULT_CONFIG.daysOld;
    } else if (arg.startsWith('--max=')) {
      config.maxContacts = parseInt(arg.split('=')[1]) || DEFAULT_CONFIG.maxContacts;
    } else if (arg.startsWith('--api-url=')) {
      config.apiUrl = arg.split('=')[1] || DEFAULT_CONFIG.apiUrl;
    } else if (arg === '--help' || arg === '-h') {
      console.log(`
Script de Sincroniza√ß√£o Autom√°tica de Contatos

Uso: node scripts/auto-sync-contacts.js [options]

Op√ß√µes:
  --days=N       Sincronizar contatos n√£o atualizados h√° N dias (padr√£o: ${DEFAULT_CONFIG.daysOld})
  --max=N        M√°ximo de contatos para processar (padr√£o: ${DEFAULT_CONFIG.maxContacts})
  --api-url=URL  URL base da API (padr√£o: ${DEFAULT_CONFIG.apiUrl})
  --help, -h     Mostrar esta ajuda

Exemplos:
  node scripts/auto-sync-contacts.js
  node scripts/auto-sync-contacts.js --days=14 --max=100
  node scripts/auto-sync-contacts.js --api-url=https://api.exemplo.com

Cron job exemplo (todo dia √†s 2h):
  0 2 * * * cd /path/to/project && node scripts/auto-sync-contacts.js >> logs/auto-sync.log 2>&1
      `);
      process.exit(0);
    }
  });

  return config;
}

// Fun√ß√£o principal
async function main() {
  const config = parseArgs();
  const timestamp = new Date().toISOString();

  console.log(`[${timestamp}] üöÄ Iniciando sincroniza√ß√£o autom√°tica de contatos`);
  console.log(`[${timestamp}] ‚öôÔ∏è Configura√ß√£o:`, {
    daysOld: config.daysOld,
    maxContacts: config.maxContacts,
    apiUrl: config.apiUrl
  });

  try {
    // Verificar se a API est√° acess√≠vel
    console.log(`[${timestamp}] üîç Verificando conectividade com a API...`);

    const healthResponse = await axios.get(`${config.apiUrl}/api/health`, {
      timeout: 10000
    }).catch(() => null);

    if (!healthResponse) {
      console.log(`[${timestamp}] ‚ùå API n√£o est√° acess√≠vel em ${config.apiUrl}`);
      console.log(`[${timestamp}] ‚ÑπÔ∏è  Certifique-se de que o servidor est√° rodando`);
      process.exit(1);
    }

    // Executar sincroniza√ß√£o
    console.log(`[${timestamp}] üîÑ Executando sincroniza√ß√£o autom√°tica...`);

    const syncResponse = await axios.post(`${config.apiUrl}/api/leads/auto-sync-outdated`, {
      daysOld: config.daysOld,
      maxContacts: config.maxContacts
    }, {
      timeout: 300000 // 5 minutos
    });

    if (syncResponse.data.success) {
      const { processed, updated, errors } = syncResponse.data.data;

      console.log(`[${timestamp}] ‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso!`);
      console.log(`[${timestamp}] üìä Resultados:`);
      console.log(`[${timestamp}]    - Contatos processados: ${processed}`);
      console.log(`[${timestamp}]    - Contatos atualizados: ${updated}`);
      console.log(`[${timestamp}]    - Erros: ${errors}`);

      if (errors > 0) {
        console.log(`[${timestamp}] ‚ö†Ô∏è  ${errors} contatos tiveram erros durante a sincroniza√ß√£o`);
      }

      // Mostrar detalhes se poucos contatos foram processados
      if (processed <= 10) {
        console.log(`[${timestamp}] üìã Detalhes dos contatos processados:`);
        syncResponse.data.data.details.forEach((detail, index) => {
          const status = detail.error ? '‚ùå' : (detail.nameUpdated || detail.pictureUpdated) ? '‚úÖ' : 'üîÑ';
          console.log(`[${timestamp}]    ${index + 1}. ${status} ${detail.phone_number} (${detail.daysOld} dias) ${detail.cached ? '[cache]' : '[fresh]'}`);
          if (detail.error) {
            console.log(`[${timestamp}]       Erro: ${detail.error}`);
          } else if (detail.nameUpdated || detail.pictureUpdated) {
            const updates = [];
            if (detail.nameUpdated) updates.push('nome');
            if (detail.pictureUpdated) updates.push('foto');
            console.log(`[${timestamp}]       Atualizado: ${updates.join(', ')}`);
          }
        });
      }

      process.exit(0);
    } else {
      console.log(`[${timestamp}] ‚ùå Falha na sincroniza√ß√£o: ${syncResponse.data.error || 'Erro desconhecido'}`);
      process.exit(1);
    }

  } catch (error) {
    console.log(`[${timestamp}] ‚ùå Erro durante a execu√ß√£o:`, error.message);

    if (error.response) {
      console.log(`[${timestamp}] üì° Status HTTP: ${error.response.status}`);
      console.log(`[${timestamp}] üìÑ Resposta: ${JSON.stringify(error.response.data)}`);
    } else if (error.request) {
      console.log(`[${timestamp}] üîå Erro de conex√£o: n√£o foi poss√≠vel conectar √† API`);
    }

    process.exit(1);
  }
}

// Tratamento de sinais para finaliza√ß√£o limpa
process.on('SIGINT', () => {
  console.log(`\n[${new Date().toISOString()}] üõë Recebido SIGINT, finalizando...`);
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log(`\n[${new Date().toISOString()}] üõë Recebido SIGTERM, finalizando...`);
  process.exit(0);
});

// Executar script se chamado diretamente
if (require.main === module) {
  main().catch(error => {
    console.error(`[${new Date().toISOString()}] ‚ùå Erro n√£o tratado:`, error);
    process.exit(1);
  });
}

module.exports = { main, parseArgs };