#!/usr/bin/env node

/**
 * Script de teste para validar sistema de extra√ß√£o
 * Testa compatibilidade entre Windows e Linux
 */

const ProcessManager = require('./api/utils/processManager');

async function testPlatformCompatibility() {
  console.log('üß™ TESTE DE COMPATIBILIDADE MULTIPLATAFORMA');
  console.log('=' .repeat(50));

  // 1. Testar informa√ß√µes da plataforma
  const platformInfo = ProcessManager.getPlatformInfo();
  console.log('\nüìã Informa√ß√µes da Plataforma:');
  console.log(`   Platform: ${platformInfo.platform}`);
  console.log(`   Architecture: ${platformInfo.arch}`);
  console.log(`   Is Windows: ${platformInfo.isWindows}`);
  console.log(`   Is Linux: ${platformInfo.isLinux}`);
  console.log(`   Hostname: ${platformInfo.hostname}`);
  console.log(`   Total Memory: ${platformInfo.totalMemory}`);
  console.log(`   Free Memory: ${platformInfo.freeMemory}`);

  // 2. Testar spawn de processo simples
  console.log('\nüöÄ Testando spawn de processo...');
  try {
    const testProcess = ProcessManager.spawn('node', ['--version']);

    let output = '';
    testProcess.stdout.on('data', (data) => {
      output += data.toString();
    });

    testProcess.on('close', (code) => {
      console.log(`   ‚úÖ Processo terminado com c√≥digo: ${code}`);
      console.log(`   üìÑ Output: ${output.trim()}`);
    });

    testProcess.on('error', (error) => {
      console.error(`   ‚ùå Erro no spawn: ${error.message}`);
    });

  } catch (error) {
    console.error(`   ‚ùå Erro ao spawnar processo: ${error.message}`);
  }

  // 3. Testar configura√ß√£o do browser
  console.log('\nüåê Testando configura√ß√£o do browser...');
  try {
    const { getBrowserConfig } = require('./extrator-rate-shopper/src/browser-config');
    const config = getBrowserConfig();

    console.log(`   ‚úÖ Browser config carregado`);
    console.log(`   üñ•Ô∏è  Headless: ${config.headless}`);
    console.log(`   üìê Viewport: ${config.defaultViewport.width}x${config.defaultViewport.height}`);
    console.log(`   ‚öôÔ∏è  Args count: ${config.args.length}`);

    if (config.executablePath) {
      console.log(`   üîß Executable path: ${config.executablePath}`);
    }

    if (config.timeout) {
      console.log(`   ‚è∞ Timeout: ${config.timeout}ms`);
    }

  } catch (error) {
    console.error(`   ‚ùå Erro na configura√ß√£o do browser: ${error.message}`);
  }

  // 4. Testar conex√£o com banco (se dispon√≠vel)
  console.log('\nüíæ Testando conex√£o com banco...');
  try {
    const ExtractionStore = require('./api/utils/extractionStore');
    const db = require('./api/config/database');

    if (!db.usingFallback) {
      const store = new ExtractionStore(db);
      await store.ensureTable();
      console.log(`   ‚úÖ Conex√£o com banco funcionando`);
      console.log(`   üóÑÔ∏è  Tabela active_extractions verificada`);

      // Testar limpeza de extra√ß√µes √≥rf√£s
      const cleanupResult = await store.cleanupStaleExtractions();
      console.log(`   üßπ Limpeza √≥rf√£s: ${cleanupResult.cleanedCount} extra√ß√µes limpas`);

    } else {
      console.log(`   ‚ö†Ô∏è  Usando fallback - banco n√£o dispon√≠vel`);
    }

  } catch (error) {
    console.error(`   ‚ùå Erro na conex√£o com banco: ${error.message}`);
  }

  // 5. Testar vari√°veis de ambiente cr√≠ticas
  console.log('\nüåç Testando vari√°veis de ambiente...');
  const criticalEnvVars = [
    'NODE_ENV',
    'HEADLESS',
    'PUPPETEER_EXECUTABLE_PATH',
    'PUPPETEER_SKIP_CHROMIUM_DOWNLOAD'
  ];

  criticalEnvVars.forEach(envVar => {
    const value = process.env[envVar];
    if (value) {
      console.log(`   ‚úÖ ${envVar}: ${value}`);
    } else {
      console.log(`   ‚ö†Ô∏è  ${envVar}: n√£o definida`);
    }
  });

  console.log('\nüéØ RESULTADO DO TESTE:');
  console.log(`   Plataforma: ${platformInfo.platform} ${platformInfo.arch}`);
  console.log(`   Sistema: ${platformInfo.isWindows ? 'Windows' : platformInfo.isLinux ? 'Linux' : 'Outros'}`);
  console.log(`   Mem√≥ria dispon√≠vel: ${platformInfo.freeMemory}`);
  console.log('   Status: ‚úÖ Testes conclu√≠dos');

  console.log('\nüìù PR√ìXIMOS PASSOS:');
  console.log('   1. Execute este teste em produ√ß√£o (Linux)');
  console.log('   2. Compare resultados entre Windows e Linux');
  console.log('   3. Verifique se extra√ß√µes funcionam em ambos');
  console.log('   4. Teste fun√ß√£o "Pausar extra√ß√£o"');
  console.log('   5. Verifique limpeza autom√°tica de √≥rf√£s');
}

// Executar teste
testPlatformCompatibility().catch(error => {
  console.error('‚ùå ERRO NO TESTE:', error);
  process.exit(1);
});