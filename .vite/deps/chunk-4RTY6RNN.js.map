{
  "version": 3,
  "sources": ["../../node_modules/@smithy/types/dist-es/middleware.js", "../../node_modules/@smithy/types/dist-es/auth/auth.js", "../../node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js", "../../node_modules/@smithy/types/dist-es/endpoint.js", "../../node_modules/@smithy/types/dist-es/extensions/checksum.js", "../../node_modules/@smithy/types/dist-es/http.js", "../../node_modules/@smithy/types/dist-es/profile.js", "../../node_modules/@smithy/types/dist-es/transfer.js", "../../node_modules/@smithy/protocol-http/dist-es/httpRequest.js", "../../node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js", "../../node_modules/@smithy/protocol-http/dist-es/httpResponse.js", "../../node_modules/@smithy/protocol-http/dist-es/isValidHostname.js", "../../node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js", "../../node_modules/@smithy/util-utf8/dist-es/toUint8Array.js", "../../node_modules/@smithy/util-utf8/dist-es/toUtf8.browser.js", "../../node_modules/@smithy/core/dist-es/submodules/schema/schemas/sentinels.js", "../../node_modules/@smithy/core/dist-es/submodules/schema/deref.js", "../../node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js", "../../node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js", "../../node_modules/@smithy/core/dist-es/submodules/schema/TypeRegistry.js", "../../node_modules/@smithy/core/dist-es/submodules/schema/schemas/Schema.js", "../../node_modules/@smithy/core/dist-es/submodules/schema/schemas/ListSchema.js", "../../node_modules/@smithy/core/dist-es/submodules/schema/schemas/MapSchema.js", "../../node_modules/@smithy/core/dist-es/submodules/schema/schemas/StructureSchema.js", "../../node_modules/@smithy/core/dist-es/submodules/schema/schemas/ErrorSchema.js", "../../node_modules/@smithy/core/dist-es/submodules/schema/schemas/SimpleSchema.js", "../../node_modules/@smithy/core/dist-es/submodules/schema/schemas/NormalizedSchema.js"],
  "sourcesContent": ["export const SMITHY_CONTEXT_KEY = \"__smithy_context\";\n", "export var HttpAuthLocation;\n(function (HttpAuthLocation) {\n    HttpAuthLocation[\"HEADER\"] = \"header\";\n    HttpAuthLocation[\"QUERY\"] = \"query\";\n})(HttpAuthLocation || (HttpAuthLocation = {}));\n", "export var HttpApiKeyAuthLocation;\n(function (HttpApiKeyAuthLocation) {\n    HttpApiKeyAuthLocation[\"HEADER\"] = \"header\";\n    HttpApiKeyAuthLocation[\"QUERY\"] = \"query\";\n})(HttpApiKeyAuthLocation || (HttpApiKeyAuthLocation = {}));\n", "export var EndpointURLScheme;\n(function (EndpointURLScheme) {\n    EndpointURLScheme[\"HTTP\"] = \"http\";\n    EndpointURLScheme[\"HTTPS\"] = \"https\";\n})(EndpointURLScheme || (EndpointURLScheme = {}));\n", "export var AlgorithmId;\n(function (AlgorithmId) {\n    AlgorithmId[\"MD5\"] = \"md5\";\n    AlgorithmId[\"CRC32\"] = \"crc32\";\n    AlgorithmId[\"CRC32C\"] = \"crc32c\";\n    AlgorithmId[\"SHA1\"] = \"sha1\";\n    AlgorithmId[\"SHA256\"] = \"sha256\";\n})(AlgorithmId || (AlgorithmId = {}));\nexport const getChecksumConfiguration = (runtimeConfig) => {\n    const checksumAlgorithms = [];\n    if (runtimeConfig.sha256 !== undefined) {\n        checksumAlgorithms.push({\n            algorithmId: () => AlgorithmId.SHA256,\n            checksumConstructor: () => runtimeConfig.sha256,\n        });\n    }\n    if (runtimeConfig.md5 != undefined) {\n        checksumAlgorithms.push({\n            algorithmId: () => AlgorithmId.MD5,\n            checksumConstructor: () => runtimeConfig.md5,\n        });\n    }\n    return {\n        addChecksumAlgorithm(algo) {\n            checksumAlgorithms.push(algo);\n        },\n        checksumAlgorithms() {\n            return checksumAlgorithms;\n        },\n    };\n};\nexport const resolveChecksumRuntimeConfig = (clientConfig) => {\n    const runtimeConfig = {};\n    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {\n        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n    });\n    return runtimeConfig;\n};\n", "export var FieldPosition;\n(function (FieldPosition) {\n    FieldPosition[FieldPosition[\"HEADER\"] = 0] = \"HEADER\";\n    FieldPosition[FieldPosition[\"TRAILER\"] = 1] = \"TRAILER\";\n})(FieldPosition || (FieldPosition = {}));\n", "export var IniSectionType;\n(function (IniSectionType) {\n    IniSectionType[\"PROFILE\"] = \"profile\";\n    IniSectionType[\"SSO_SESSION\"] = \"sso-session\";\n    IniSectionType[\"SERVICES\"] = \"services\";\n})(IniSectionType || (IniSectionType = {}));\n", "export var RequestHandlerProtocol;\n(function (RequestHandlerProtocol) {\n    RequestHandlerProtocol[\"HTTP_0_9\"] = \"http/0.9\";\n    RequestHandlerProtocol[\"HTTP_1_0\"] = \"http/1.0\";\n    RequestHandlerProtocol[\"TDS_8_0\"] = \"tds/8.0\";\n})(RequestHandlerProtocol || (RequestHandlerProtocol = {}));\n", "export class HttpRequest {\n    constructor(options) {\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol\n            ? options.protocol.slice(-1) !== \":\"\n                ? `${options.protocol}:`\n                : options.protocol\n            : \"https:\";\n        this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n        this.username = options.username;\n        this.password = options.password;\n        this.fragment = options.fragment;\n    }\n    static clone(request) {\n        const cloned = new HttpRequest({\n            ...request,\n            headers: { ...request.headers },\n        });\n        if (cloned.query) {\n            cloned.query = cloneQuery(cloned.query);\n        }\n        return cloned;\n    }\n    static isInstance(request) {\n        if (!request) {\n            return false;\n        }\n        const req = request;\n        return (\"method\" in req &&\n            \"protocol\" in req &&\n            \"hostname\" in req &&\n            \"path\" in req &&\n            typeof req[\"query\"] === \"object\" &&\n            typeof req[\"headers\"] === \"object\");\n    }\n    clone() {\n        return HttpRequest.clone(this);\n    }\n}\nfunction cloneQuery(query) {\n    return Object.keys(query).reduce((carry, paramName) => {\n        const param = query[paramName];\n        return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [...param] : param,\n        };\n    }, {});\n}\n", "export const getHttpHandlerExtensionConfiguration = (runtimeConfig) => {\n    return {\n        setHttpHandler(handler) {\n            runtimeConfig.httpHandler = handler;\n        },\n        httpHandler() {\n            return runtimeConfig.httpHandler;\n        },\n        updateHttpClientConfig(key, value) {\n            runtimeConfig.httpHandler?.updateHttpClientConfig(key, value);\n        },\n        httpHandlerConfigs() {\n            return runtimeConfig.httpHandler.httpHandlerConfigs();\n        },\n    };\n};\nexport const resolveHttpHandlerRuntimeConfig = (httpHandlerExtensionConfiguration) => {\n    return {\n        httpHandler: httpHandlerExtensionConfiguration.httpHandler(),\n    };\n};\n", "export class HttpResponse {\n    constructor(options) {\n        this.statusCode = options.statusCode;\n        this.reason = options.reason;\n        this.headers = options.headers || {};\n        this.body = options.body;\n    }\n    static isInstance(response) {\n        if (!response)\n            return false;\n        const resp = response;\n        return typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\";\n    }\n}\n", "export function isValidHostname(hostname) {\n    const hostPattern = /^[a-z0-9][a-z0-9\\.\\-]*[a-z0-9]$/;\n    return hostPattern.test(hostname);\n}\n", "export const fromUtf8 = (input) => new TextEncoder().encode(input);\n", "import { fromUtf8 } from \"./fromUtf8\";\nexport const toUint8Array = (data) => {\n    if (typeof data === \"string\") {\n        return fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n};\n", "export const toUtf8 = (input) => {\n    if (typeof input === \"string\") {\n        return input;\n    }\n    if (typeof input !== \"object\" || typeof input.byteOffset !== \"number\" || typeof input.byteLength !== \"number\") {\n        throw new Error(\"@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.\");\n    }\n    return new TextDecoder(\"utf-8\").decode(input);\n};\n", "export const SCHEMA = {\n    BLOB: 21,\n    STREAMING_BLOB: 42,\n    BOOLEAN: 2,\n    STRING: 0,\n    NUMERIC: 1,\n    BIG_INTEGER: 17,\n    BIG_DECIMAL: 19,\n    DOCUMENT: 15,\n    TIMESTAMP_DEFAULT: 4,\n    TIMESTAMP_DATE_TIME: 5,\n    TIMESTAMP_HTTP_DATE: 6,\n    TIMESTAMP_EPOCH_SECONDS: 7,\n    LIST_MODIFIER: 64,\n    MAP_MODIFIER: 128,\n};\n", "export const deref = (schemaRef) => {\n    if (typeof schemaRef === \"function\") {\n        return schemaRef();\n    }\n    return schemaRef;\n};\n", "import { SMITHY_CONTEXT_KEY } from \"@smithy/types\";\nexport const getSmithyContext = (context) => context[SMITHY_CONTEXT_KEY] || (context[SMITHY_CONTEXT_KEY] = {});\n", "export const normalizeProvider = (input) => {\n    if (typeof input === \"function\")\n        return input;\n    const promisified = Promise.resolve(input);\n    return () => promisified;\n};\n", "export class TypeRegistry {\n    constructor(namespace, schemas = new Map()) {\n        this.namespace = namespace;\n        this.schemas = schemas;\n    }\n    static for(namespace) {\n        if (!TypeRegistry.registries.has(namespace)) {\n            TypeRegistry.registries.set(namespace, new TypeRegistry(namespace));\n        }\n        return TypeRegistry.registries.get(namespace);\n    }\n    register(shapeId, schema) {\n        const qualifiedName = this.normalizeShapeId(shapeId);\n        const registry = TypeRegistry.for(this.getNamespace(shapeId));\n        registry.schemas.set(qualifiedName, schema);\n    }\n    getSchema(shapeId) {\n        const id = this.normalizeShapeId(shapeId);\n        if (!this.schemas.has(id)) {\n            throw new Error(`@smithy/core/schema - schema not found for ${id}`);\n        }\n        return this.schemas.get(id);\n    }\n    getBaseException() {\n        for (const [id, schema] of this.schemas.entries()) {\n            if (id.startsWith(\"smithy.ts.sdk.synthetic.\") && id.endsWith(\"ServiceException\")) {\n                return schema;\n            }\n        }\n        return undefined;\n    }\n    find(predicate) {\n        return [...this.schemas.values()].find(predicate);\n    }\n    destroy() {\n        TypeRegistry.registries.delete(this.namespace);\n        this.schemas.clear();\n    }\n    normalizeShapeId(shapeId) {\n        if (shapeId.includes(\"#\")) {\n            return shapeId;\n        }\n        return this.namespace + \"#\" + shapeId;\n    }\n    getNamespace(shapeId) {\n        return this.normalizeShapeId(shapeId).split(\"#\")[0];\n    }\n}\nTypeRegistry.registries = new Map();\n", "export class Schema {\n    constructor(name, traits) {\n        this.name = name;\n        this.traits = traits;\n    }\n}\n", "import { TypeRegistry } from \"../TypeRegistry\";\nimport { Schema } from \"./Schema\";\nexport class ListSchema extends Schema {\n    constructor(name, traits, valueSchema) {\n        super(name, traits);\n        this.name = name;\n        this.traits = traits;\n        this.valueSchema = valueSchema;\n        this.symbol = ListSchema.symbol;\n    }\n    static [Symbol.hasInstance](lhs) {\n        const isPrototype = ListSchema.prototype.isPrototypeOf(lhs);\n        if (!isPrototype && typeof lhs === \"object\" && lhs !== null) {\n            const list = lhs;\n            return list.symbol === ListSchema.symbol;\n        }\n        return isPrototype;\n    }\n}\nListSchema.symbol = Symbol.for(\"@smithy/core/schema::ListSchema\");\nexport function list(namespace, name, traits = {}, valueSchema) {\n    const schema = new ListSchema(namespace + \"#\" + name, traits, typeof valueSchema === \"function\" ? valueSchema() : valueSchema);\n    TypeRegistry.for(namespace).register(name, schema);\n    return schema;\n}\n", "import { TypeRegistry } from \"../TypeRegistry\";\nimport { Schema } from \"./Schema\";\nexport class MapSchema extends Schema {\n    constructor(name, traits, keySchema, valueSchema) {\n        super(name, traits);\n        this.name = name;\n        this.traits = traits;\n        this.keySchema = keySchema;\n        this.valueSchema = valueSchema;\n        this.symbol = MapSchema.symbol;\n    }\n    static [Symbol.hasInstance](lhs) {\n        const isPrototype = MapSchema.prototype.isPrototypeOf(lhs);\n        if (!isPrototype && typeof lhs === \"object\" && lhs !== null) {\n            const map = lhs;\n            return map.symbol === MapSchema.symbol;\n        }\n        return isPrototype;\n    }\n}\nMapSchema.symbol = Symbol.for(\"@smithy/core/schema::MapSchema\");\nexport function map(namespace, name, traits = {}, keySchema, valueSchema) {\n    const schema = new MapSchema(namespace + \"#\" + name, traits, keySchema, typeof valueSchema === \"function\" ? valueSchema() : valueSchema);\n    TypeRegistry.for(namespace).register(name, schema);\n    return schema;\n}\n", "import { TypeRegistry } from \"../TypeRegistry\";\nimport { Schema } from \"./Schema\";\nexport class StructureSchema extends Schema {\n    constructor(name, traits, memberNames, memberList) {\n        super(name, traits);\n        this.name = name;\n        this.traits = traits;\n        this.memberNames = memberNames;\n        this.memberList = memberList;\n        this.symbol = StructureSchema.symbol;\n        this.members = {};\n        for (let i = 0; i < memberNames.length; ++i) {\n            this.members[memberNames[i]] = Array.isArray(memberList[i])\n                ? memberList[i]\n                : [memberList[i], 0];\n        }\n    }\n    static [Symbol.hasInstance](lhs) {\n        const isPrototype = StructureSchema.prototype.isPrototypeOf(lhs);\n        if (!isPrototype && typeof lhs === \"object\" && lhs !== null) {\n            const struct = lhs;\n            return struct.symbol === StructureSchema.symbol;\n        }\n        return isPrototype;\n    }\n}\nStructureSchema.symbol = Symbol.for(\"@smithy/core/schema::StructureSchema\");\nexport function struct(namespace, name, traits, memberNames, memberList) {\n    const schema = new StructureSchema(namespace + \"#\" + name, traits, memberNames, memberList);\n    TypeRegistry.for(namespace).register(name, schema);\n    return schema;\n}\n", "import { TypeRegistry } from \"../TypeRegistry\";\nimport { StructureSchema } from \"./StructureSchema\";\nexport class ErrorSchema extends StructureSchema {\n    constructor(name, traits, memberNames, memberList, ctor) {\n        super(name, traits, memberNames, memberList);\n        this.name = name;\n        this.traits = traits;\n        this.memberNames = memberNames;\n        this.memberList = memberList;\n        this.ctor = ctor;\n        this.symbol = ErrorSchema.symbol;\n    }\n    static [Symbol.hasInstance](lhs) {\n        const isPrototype = ErrorSchema.prototype.isPrototypeOf(lhs);\n        if (!isPrototype && typeof lhs === \"object\" && lhs !== null) {\n            const err = lhs;\n            return err.symbol === ErrorSchema.symbol;\n        }\n        return isPrototype;\n    }\n}\nErrorSchema.symbol = Symbol.for(\"@smithy/core/schema::ErrorSchema\");\nexport function error(namespace, name, traits = {}, memberNames, memberList, ctor) {\n    const schema = new ErrorSchema(namespace + \"#\" + name, traits, memberNames, memberList, ctor);\n    TypeRegistry.for(namespace).register(name, schema);\n    return schema;\n}\n", "import { TypeRegistry } from \"../TypeRegistry\";\nimport { Schema } from \"./Schema\";\nexport class SimpleSchema extends Schema {\n    constructor(name, schemaRef, traits) {\n        super(name, traits);\n        this.name = name;\n        this.schemaRef = schemaRef;\n        this.traits = traits;\n        this.symbol = SimpleSchema.symbol;\n    }\n    static [Symbol.hasInstance](lhs) {\n        const isPrototype = SimpleSchema.prototype.isPrototypeOf(lhs);\n        if (!isPrototype && typeof lhs === \"object\" && lhs !== null) {\n            const sim = lhs;\n            return sim.symbol === SimpleSchema.symbol;\n        }\n        return isPrototype;\n    }\n}\nSimpleSchema.symbol = Symbol.for(\"@smithy/core/schema::SimpleSchema\");\nexport function sim(namespace, name, schemaRef, traits) {\n    const schema = new SimpleSchema(namespace + \"#\" + name, schemaRef, traits);\n    TypeRegistry.for(namespace).register(name, schema);\n    return schema;\n}\n", "import { deref } from \"../deref\";\nimport { ListSchema } from \"./ListSchema\";\nimport { MapSchema } from \"./MapSchema\";\nimport { SCHEMA } from \"./sentinels\";\nimport { SimpleSchema } from \"./SimpleSchema\";\nimport { StructureSchema } from \"./StructureSchema\";\nexport class NormalizedSchema {\n    constructor(ref, memberName) {\n        this.ref = ref;\n        this.memberName = memberName;\n        this.symbol = NormalizedSchema.symbol;\n        const traitStack = [];\n        let _ref = ref;\n        let schema = ref;\n        this._isMemberSchema = false;\n        while (Array.isArray(_ref)) {\n            traitStack.push(_ref[1]);\n            _ref = _ref[0];\n            schema = deref(_ref);\n            this._isMemberSchema = true;\n        }\n        if (traitStack.length > 0) {\n            this.memberTraits = {};\n            for (let i = traitStack.length - 1; i >= 0; --i) {\n                const traitSet = traitStack[i];\n                Object.assign(this.memberTraits, NormalizedSchema.translateTraits(traitSet));\n            }\n        }\n        else {\n            this.memberTraits = 0;\n        }\n        if (schema instanceof NormalizedSchema) {\n            this.name = schema.name;\n            this.traits = schema.traits;\n            this._isMemberSchema = schema._isMemberSchema;\n            this.schema = schema.schema;\n            this.memberTraits = Object.assign({}, schema.getMemberTraits(), this.getMemberTraits());\n            this.normalizedTraits = void 0;\n            this.ref = schema.ref;\n            this.memberName = memberName ?? schema.memberName;\n            return;\n        }\n        this.schema = deref(schema);\n        if (this.schema && typeof this.schema === \"object\") {\n            this.traits = this.schema?.traits ?? {};\n        }\n        else {\n            this.traits = 0;\n        }\n        this.name =\n            (typeof this.schema === \"object\" ? this.schema?.name : void 0) ?? this.memberName ?? this.getSchemaName();\n        if (this._isMemberSchema && !memberName) {\n            throw new Error(`@smithy/core/schema - NormalizedSchema member schema ${this.getName(true)} must initialize with memberName argument.`);\n        }\n    }\n    static [Symbol.hasInstance](lhs) {\n        const isPrototype = NormalizedSchema.prototype.isPrototypeOf(lhs);\n        if (!isPrototype && typeof lhs === \"object\" && lhs !== null) {\n            const ns = lhs;\n            return ns.symbol === NormalizedSchema.symbol;\n        }\n        return isPrototype;\n    }\n    static of(ref, memberName) {\n        if (ref instanceof NormalizedSchema) {\n            return ref;\n        }\n        return new NormalizedSchema(ref, memberName);\n    }\n    static translateTraits(indicator) {\n        if (typeof indicator === \"object\") {\n            return indicator;\n        }\n        indicator = indicator | 0;\n        const traits = {};\n        if ((indicator & 1) === 1) {\n            traits.httpLabel = 1;\n        }\n        if (((indicator >> 1) & 1) === 1) {\n            traits.idempotent = 1;\n        }\n        if (((indicator >> 2) & 1) === 1) {\n            traits.idempotencyToken = 1;\n        }\n        if (((indicator >> 3) & 1) === 1) {\n            traits.sensitive = 1;\n        }\n        if (((indicator >> 4) & 1) === 1) {\n            traits.httpPayload = 1;\n        }\n        if (((indicator >> 5) & 1) === 1) {\n            traits.httpResponseCode = 1;\n        }\n        if (((indicator >> 6) & 1) === 1) {\n            traits.httpQueryParams = 1;\n        }\n        return traits;\n    }\n    static memberFrom(memberSchema, memberName) {\n        if (memberSchema instanceof NormalizedSchema) {\n            memberSchema.memberName = memberName;\n            memberSchema._isMemberSchema = true;\n            return memberSchema;\n        }\n        return new NormalizedSchema(memberSchema, memberName);\n    }\n    getSchema() {\n        if (this.schema instanceof NormalizedSchema) {\n            return (this.schema = this.schema.getSchema());\n        }\n        if (this.schema instanceof SimpleSchema) {\n            return deref(this.schema.schemaRef);\n        }\n        return deref(this.schema);\n    }\n    getName(withNamespace = false) {\n        if (!withNamespace) {\n            if (this.name && this.name.includes(\"#\")) {\n                return this.name.split(\"#\")[1];\n            }\n        }\n        return this.name || undefined;\n    }\n    getMemberName() {\n        if (!this.isMemberSchema()) {\n            throw new Error(`@smithy/core/schema - cannot get member name on non-member schema: ${this.getName(true)}`);\n        }\n        return this.memberName;\n    }\n    isMemberSchema() {\n        return this._isMemberSchema;\n    }\n    isUnitSchema() {\n        return this.getSchema() === \"unit\";\n    }\n    isListSchema() {\n        const inner = this.getSchema();\n        if (typeof inner === \"number\") {\n            return inner >= SCHEMA.LIST_MODIFIER && inner < SCHEMA.MAP_MODIFIER;\n        }\n        return inner instanceof ListSchema;\n    }\n    isMapSchema() {\n        const inner = this.getSchema();\n        if (typeof inner === \"number\") {\n            return inner >= SCHEMA.MAP_MODIFIER && inner <= 255;\n        }\n        return inner instanceof MapSchema;\n    }\n    isDocumentSchema() {\n        return this.getSchema() === SCHEMA.DOCUMENT;\n    }\n    isStructSchema() {\n        const inner = this.getSchema();\n        return (inner !== null && typeof inner === \"object\" && \"members\" in inner) || inner instanceof StructureSchema;\n    }\n    isBlobSchema() {\n        return this.getSchema() === SCHEMA.BLOB || this.getSchema() === SCHEMA.STREAMING_BLOB;\n    }\n    isTimestampSchema() {\n        const schema = this.getSchema();\n        return typeof schema === \"number\" && schema >= SCHEMA.TIMESTAMP_DEFAULT && schema <= SCHEMA.TIMESTAMP_EPOCH_SECONDS;\n    }\n    isStringSchema() {\n        return this.getSchema() === SCHEMA.STRING;\n    }\n    isBooleanSchema() {\n        return this.getSchema() === SCHEMA.BOOLEAN;\n    }\n    isNumericSchema() {\n        return this.getSchema() === SCHEMA.NUMERIC;\n    }\n    isBigIntegerSchema() {\n        return this.getSchema() === SCHEMA.BIG_INTEGER;\n    }\n    isBigDecimalSchema() {\n        return this.getSchema() === SCHEMA.BIG_DECIMAL;\n    }\n    isStreaming() {\n        const streaming = !!this.getMergedTraits().streaming;\n        if (streaming) {\n            return true;\n        }\n        return this.getSchema() === SCHEMA.STREAMING_BLOB;\n    }\n    isIdempotencyToken() {\n        if (typeof this.traits === \"number\") {\n            return (this.traits & 0b0100) === 0b0100;\n        }\n        else if (typeof this.traits === \"object\") {\n            return !!this.traits.idempotencyToken;\n        }\n        return false;\n    }\n    getMergedTraits() {\n        if (this.normalizedTraits) {\n            return this.normalizedTraits;\n        }\n        this.normalizedTraits = {\n            ...this.getOwnTraits(),\n            ...this.getMemberTraits(),\n        };\n        return this.normalizedTraits;\n    }\n    getMemberTraits() {\n        return NormalizedSchema.translateTraits(this.memberTraits);\n    }\n    getOwnTraits() {\n        return NormalizedSchema.translateTraits(this.traits);\n    }\n    getKeySchema() {\n        if (this.isDocumentSchema()) {\n            return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], \"key\");\n        }\n        if (!this.isMapSchema()) {\n            throw new Error(`@smithy/core/schema - cannot get key schema for non-map schema: ${this.getName(true)}`);\n        }\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            return NormalizedSchema.memberFrom([63 & schema, 0], \"key\");\n        }\n        return NormalizedSchema.memberFrom([schema.keySchema, 0], \"key\");\n    }\n    getValueSchema() {\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            if (this.isMapSchema()) {\n                return NormalizedSchema.memberFrom([63 & schema, 0], \"value\");\n            }\n            else if (this.isListSchema()) {\n                return NormalizedSchema.memberFrom([63 & schema, 0], \"member\");\n            }\n        }\n        if (schema && typeof schema === \"object\") {\n            if (this.isStructSchema()) {\n                throw new Error(`cannot call getValueSchema() with StructureSchema ${this.getName(true)}`);\n            }\n            const collection = schema;\n            if (\"valueSchema\" in collection) {\n                if (this.isMapSchema()) {\n                    return NormalizedSchema.memberFrom([collection.valueSchema, 0], \"value\");\n                }\n                else if (this.isListSchema()) {\n                    return NormalizedSchema.memberFrom([collection.valueSchema, 0], \"member\");\n                }\n            }\n        }\n        if (this.isDocumentSchema()) {\n            return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], \"value\");\n        }\n        throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have a value member.`);\n    }\n    hasMemberSchema(member) {\n        if (this.isStructSchema()) {\n            const struct = this.getSchema();\n            return member in struct.members;\n        }\n        return false;\n    }\n    getMemberSchema(member) {\n        if (this.isStructSchema()) {\n            const struct = this.getSchema();\n            if (!(member in struct.members)) {\n                throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have a member with name=${member}.`);\n            }\n            return NormalizedSchema.memberFrom(struct.members[member], member);\n        }\n        if (this.isDocumentSchema()) {\n            return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], member);\n        }\n        throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have members.`);\n    }\n    getMemberSchemas() {\n        const { schema } = this;\n        const struct = schema;\n        if (!struct || typeof struct !== \"object\") {\n            return {};\n        }\n        if (\"members\" in struct) {\n            const buffer = {};\n            for (const member of struct.memberNames) {\n                buffer[member] = this.getMemberSchema(member);\n            }\n            return buffer;\n        }\n        return {};\n    }\n    getEventStreamMember() {\n        if (this.isStructSchema()) {\n            for (const [memberName, memberSchema] of this.structIterator()) {\n                if (memberSchema.isStreaming() && memberSchema.isStructSchema()) {\n                    return memberName;\n                }\n            }\n        }\n        return \"\";\n    }\n    *structIterator() {\n        if (this.isUnitSchema()) {\n            return;\n        }\n        if (!this.isStructSchema()) {\n            throw new Error(\"@smithy/core/schema - cannot acquire structIterator on non-struct schema.\");\n        }\n        const struct = this.getSchema();\n        for (let i = 0; i < struct.memberNames.length; ++i) {\n            yield [struct.memberNames[i], NormalizedSchema.memberFrom([struct.memberList[i], 0], struct.memberNames[i])];\n        }\n    }\n    getSchemaName() {\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            const _schema = 63 & schema;\n            const container = 192 & schema;\n            const type = Object.entries(SCHEMA).find(([, value]) => {\n                return value === _schema;\n            })?.[0] ?? \"Unknown\";\n            switch (container) {\n                case SCHEMA.MAP_MODIFIER:\n                    return `${type}Map`;\n                case SCHEMA.LIST_MODIFIER:\n                    return `${type}List`;\n                case 0:\n                    return type;\n            }\n        }\n        return \"Unknown\";\n    }\n}\nNormalizedSchema.symbol = Symbol.for(\"@smithy/core/schema::NormalizedSchema\");\n"],
  "mappings": "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",
  "names": ["HttpAuthLocation", "HttpApiKeyAuthLocation", "EndpointURLScheme", "AlgorithmId", "FieldPosition", "IniSectionType", "RequestHandlerProtocol"]
}
